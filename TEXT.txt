	ок добрый вечер давайте начинать по традиции навещать не могу когда-нибудь. учат есть картинка и звук и мы начнем.

	 спасибо значит еще есть такое предложение что после сейчас будет видимо два куска. 
два куска с перерывом лет после второй. лекции я зайду в discord ссылка будет. телеграме сколько вот они-то и если есть какие-то организационные вопросы по поводу там сколько лап как будет проходить экзамен то я уже после лекций 
дискорд начать вопросы отвечу насчет курс называется технологии программирования и он посвящен языку. джалла курс состоит из двух частей в. первой части мы собственно то чтобы дел. час это будет поведение в язык java и. 
разберем просто все основные концепции. после этого участи круг летом будет. производственная практика на java там будем сейчас как царь графические приложения вообще она дала в частности и собственно на 3 курсе будет продолжать. 
фланге программирования 2 тайм это становится как с помощью java писать свои сетевые программы. это могут быть как игры которые.

	 многопользовательские так и сайт и мы рассмотрим это и другое сегодня хочется 
поговорить о двух вещах первое открытие. всего поговорить о том вообще истории джалла почему она появилась почему она стала популярна в чем особенность языка и второе поговорить про базовый. синтаксис типы данных 
основные инструкции на виду операторы. языка там циклы iv есть предварительные требования курса что вы умеете программировать на сессию плюс плюс вот собственно поэтому многие концепции например объектно-ориентированное 
программирование будет рассказываться не. с нуля ну и там трусом этом циклы и проверки мудро казани с нуля а предполагается что вы это вы знаете я просто расскажу какие есть принципиальные отличия , а эти 
конструкции и почему они появились. давайте начинать значит собственно.

	 исторически все до семидесятые годы си. плюс плюс восьмидесятые годы java это 90-е годы но там по моему девяносто. пятый год появилось вопрос про практику 
я все расскажу в дискорде после оплаты. лекции джавадов пятый год собственно и. так корпорация такая была сам.

	 данный момент кооперацией сам купила корпорации oracle. я собственно вот дрова занимается. 
развитием фирмы oracal кроме того есть. комьюнити то есть до развивается как. открытый проект то есть есть комитет где. заседают представители как сообщество программистов так разных фирм. разработчиков этих инструментов для java 
и вот они занимаются развитием языка тельств предлагают новые возможности. обсуждают и собственно это уже. развивается язык собственно следующий. виток развития это язык си sharp от microsoft это тот уже двухтысячные годы 
в принципе поняла пару слов скажу потому что это язык идеологический близкий то есть если вы освоите один из них то на. другой перейти будет легче потому что в. обоих этих языках важно лежат одни и те. же идеи вообще как как исторически все 
складывалось. но если помним ся то усе был слот он. такой writeline войскам подрывая то есть предполагалось что программистом не должен знать особенности офицеры. конкретного компьютера то есть какие 
регистры какие команды есть у процессора. себя компилятор и собственно если нужно перейти на другой компьютер не требуется переписывать программу а надо просто взять текущие исходный код и просто 
перекомпилировать его друг компилятором. под новый компьютер вот но при этом. нельзя взять скажем уже исполняемый код с одного компьютера скажем с mako и запустить например на из 80. эти потому что ну вот сейчас уже на 
магия. процессора и система команда друга кроме того вообще тут лучше говорить и не столько о конкретном процессоре сколько вести понятия платформы под платформу в этом 
курсе будем понимать. комбинацию между операционной системой и. процессором потому что как только вы начинаете писать более менее сложные программы разных потребоваться. операционная система там например нужно 
работать с файлами через операционную систему нужно рисовать графические окошке все это разных персон с тем только по. разному делается кроме того стандарт языка си си плюс плюс графической блеать 
эко не входят под каждой местности надо писать свою кроме того разных операционных системах разные форматы исполняемых файлов то есть формат файла несмотря на то что и там и там. 
содержится например и windows ставим файлик команды для процессора 86 формат файлов разный эль файл который получен компиляции программы на си климаксе перенести его windows там запустить вот все равно тебя 
требуется шаг взять исходные коды программы на языке си и. перекомпилировать компилятором подвид ты хочешь программами разных платформах но опять же ты столкнешься с массой проблем проблем с все будет связано с тем что 
под linux писал графическое приложение должен был выбрать какую-то библиотеку. например биотек у детей под windows обычно графические приложения пишут на торги nforce это стандартная библиотека графический интерфейс под windows тем 
как минимум эту часть программы. переписать поэтому в принципе вот это вот идея пройду once компания она. работа только для программе с некоторыми ограничениями то есть программы не 
должно быть работой сессию программы должна быть графического интерфейса если что-то такое пыль с тебя сразу нужно под разной операционной. системы учитывать эти нюансы и переписывать сок программе с учетом 
операционной системы да там были всякие. решения эти библиотеки каюте которая пыталась взять на себя эту работу но это все равно не часть стандарта это нужно отдельно такое скачивать бразилиа те как. с ними федерации так далее какую задачу 
решали начала первых словом к слову у них был компаньон сраного и боя что значит программа компилируется один раз. и под скомпилированный код можно. запускать на разных платформах идея более амбициозное не требуется. 
перекомпиляции я просто двоичный код устроят таким образом можно списать и. windows и на linux и в майке и так далее вот мы поговорим так это устроено как вообще исторически они дошли до этой задачи.

	 
если тебе в то время требовалось полярная программа я хотела что пользователи могли запускать ее на компьютерах от с разными платформами то есть там. windows linux макс должен был у себя на. 
сайте положить три версии программы то есть три исполняемые файлы. скомпилированные под разные операционные. системы с толку на си плюс плюс сам хотел решить такую задачу вот нельзя ли сделать так нельзя ли как-то сделать 
такую программу чтобы я положил на сайты. и ладно не важно откуда пользователь было скачал с компьютером с linux смотрели свин он запустилось и эта программа программ программ была в одном экземпляре ты технологию которое они 
пытались сделать называлась java апплет. ой это такие программы которые написаны были на java и выполнялись внутри браузера. вот ну да наши дни на чалонге не дожила. сначала она была вытеснена технологии 
macromedia flash до сих пор вы можете там где-то моете браузерные игры на. чалонге flash вот 1 верста мне тебя были видео стриминга бы на чалонге flash сейчас человека flash тоже умерла и и собственно если что-то нужно выполнить 
внутри браузера. это язык java script вот это есть в принципе то ради чего изначально затевалось это сейчас не используется но. язык java script он язык специальные он направляющим похож мы про него будем 
говорить следующем семестре я просто тогда когда разрабатывали язык java script зал был очень популярным в маркетинговых целях решили как бы частичку популярности частичку хайпа взять себе и вот названия язык с более 
слова джалла но в принципе java script и giovanni очень похоже тараз. языки и еще раз когда разрабатывали того хотели решить зачем кроссплатформенность и то есть чтобы 1 этаже исполняемый год запускался на разных платформах 
то по форме мы понимаем данном курсе комбинацию с процессор операционной. системы но в результате вот это технологии рать которой всё. разрабатывалась она умерла но java является очень популярным языком 
его использовать для широкого набора предложений. то есть используют как для в описании то что называется десктопных программ. который вашем компьютере например можно что указать среда разработки intel джея. 
идея и clips and bells.

	 сила им это все программу написанное на java есть даже играя написанная на java ну. собственно это майкрофт ну кроме того. большое количество серверного кода то 
есть для системных приложений написано. да вот мы сейчас постепенно разберемся в. чем люди почему-то стало популярным.

	 значит что придумали ну нельзя сказать что они первые придумали на самом деле вот идея по которой рассказал там чили 
них pascal первый раз появилась просто и удалось это просто как-то очень удачно. сделать и реализовать удачное хорошо маркетом провести в общем в нужное время. их решения стало популярным теперь между программой и непосредственно процессом. 
есть прослойка называется виртуальная машина java по сути это программная модель концу внутри которой исполняется программа ну вот у вас наверно был курс посвященной архитектуре компьютера и дар был 
симулятор компьютера там какого то там. то левак стали дек черт то кого то есть это программная модель и какого-то компьютера там например если нужно регистр это массе массивы датами набор регистров 
это воды программного массивов и получается что ваша программа исполняется не на процессоре а исполняется внутри вот этого симулятора. процессора точно такую же роль играет. java машины то есть это программная 
модель компьютера собственно и. компилятор теперь порождает код не для непосредственно процессора порождает код для этой вот виртуальной машины для. этого симулятора компьютера то есть для каждой новой платформы. 
требуется теперь написать новую машину. ну байт-код несложный виртуальная машина обычно достаточно простая почему кстати. называется байт-код потому что в двоичных кодах для этой машины все. команды умещается ровно в 10 да вот 
поэтому вот если например там у. компьютера фирмы intel там команды 4 байт не или бывает 6 байт не переменная длина то. у команды не очень много и они. однобайтовых то есть принципе написать. 
новую дала машину для новой платформы для процессора кормили для процессорами и которые дали для телефона. это принципе не очень сложная задача компилятор ты бежишь один раз компилятор генерирует. 
инструкции генералов двоичный код но не скандар конкретного процессора а в виде кода для вот этой вот придуманный машины виртуальный наш. нажала и уже задачи виртуальной машины. java во время выполнения программы. 
перевести инструкции байт-кода cod. реального процессора то есть по сути если у нас вот программы россии моё дрожали в двоичный код. запустили и процессор идет инструкция за инструкция их выполняет то у нас бы было 
программа на java мы из компилировали получили байт-код теперь мы должны допустить виртуальную машину. скормить на вход виртуальной машине свой. байт-код виртуальная машина считывает из 
файла из байт кодом инструкция за. инструкций каждую инструкцию преобразует. в инструкцию уже настоящего процессора и выполняет если у настоящей программы на каждую функцию один шаг просто выполнить. то в джаве на каждую инструкцию два шага. 
1 1 шаг транслировать с байт-кода в нативный так называемый код то есть на эти слова родной в код непосредственно процессами на котором производится выполнение и вторым шагом уже вот-вот транслированы. 
you команду выполнить всю задачу про преобразованию инструкций с байт-кода на команда конкретного процессора. берёт на себя дал машины на данный. момент для всех компьютеров для которых. это имеет смысл ну там для очень слабого 
компьютера там с маленьким числом памяти с низкой частотой вообще писать на java не имеет смысл ну это мы сегодня узнаем почему в принципе для всех компьютер для которых то разумно задача создания одного машин уже решат 
под windows под маркой подлинно в зале. машина уже здесь вот скажите пожалуйста вот я рассказал изучать иную историю как работает раз платформе снабжала благодаря чему можем взять один и тот же. исполняемый файл на java и без каких-то 
модификаций запустить его на разных платформах с точки зрения производительности напишите пожалуйста че мы чем-то заплатили стала быстрее медленнее осталось так же по трассе. ведь просто комментариях.

	 
да спасибо вот появился правильный ответ конечно завладели временем исполнения конечно стала медленно все все ответы правильные ты. действительно если тут у нас программе. носи на каждую инструкцию базовая пока 
один шаг выполнить то теперь на каждый инструкции вас два шага 1 шага барнетт виртуальная машина java. вот оно преобразует команду с байт-кода of нативный код и потом про за выполняется у нас получается что если в 
первом варианте программы выполняются сразу на процессоре то во втором варианте получается что программа. выполняет программу документально сколько мне известно жало ведьме непременно полтора-два раза это такой 
вопрос дискуссионный мы сейчас. постепенно начну рассказывать и будет. ясно что в принципе можно подобрать такой специально сконструированный. пример что программы на java будет быстрее программы на си но это отдельно 
специально построен например искусственные но вот если говорить в среднем что если как бы депутация искусственно построить очень быструю программа просто программировать решая с. помощью языка свою задачу камеру игру 
или создавая систему документооборота или что то еще то конечно программа. будет мир не вот там слезает но пока мы получили кроссплатформенность возможность одну и туже прогрел парень разных компьютерах без перекомпиляции. 
и другие дар . на сегодняшний день это. является не главной причиной выбора java.

	 5 разбираться дальше это была главная особенность. сейчас мы обсудим и другие особенности языка java 
чём была проблема. си плюс плюс вообще конечно можно было писать очень быстрой программы который. очень эффективно использует процессор и. не уступают по эффективности программ написано вручную на севере. 
вот но при этом программировать 8 тяжело. почему тяжело ну во-первых платой за. скорость является особенность риска которая позволяет легко допустить ошибку и долго и и потом искать во время отладки что я имею ввиду 
ну дело в том что все си плюс плюс. массив это просто напрямую транслируются. операция седана robots пончо и не компилятор не вали на выполнение не. происходит никакого контроля затем не вышли за пределы массива это очень 
эффективно потому что у вас обращение к чайке массива это практически 1-я северная инструкция с другой стороны если вы выходите за пределы массива. все + + или всем компилятором вода не показывает и вы такую ошибку будете 
очень долго искать потому что это бывает define by heather так как программа будет вести себя зависит от того что в памяти находилось до вашей программы как компилятор операционной системы разобщили вашу 
программу памяти и так далее возможно метро запускаетесь работает выбор запускаете программу не работает просто смотри есть ошибка но на одном компьютере в этой части был 0 где вышли за пределом другой был к это значение 
моя фотография летом то можно может можно попасть данной другой программы программа упадет и так далее этот труд разводимые ошибки при разных запуска будет разных атак в. этом проблема далее швы не так вообще 
решили что окей мы компьютеры постоянно развивается то есть. увеличивается частота и мы заплатим производительностью за время работы программистов про гранит будет работать меньше жить ему станет 
легче программу стать быстрее но плата за это вы более медленной программы вообще это очень. разумно размер потому что нельзя хотя что все просто java говорят что это языки jeunesse 
язык общего назначения на нем можно 5 как бы все рисков есть ниши если мы говорим ради этого списка вроде. приложениях управление ракетой или компьютерной игрой нам с 3d графикой. которая сложно рассчитывать. 
или нейронные сети которые распознают это все описано си плюс плюс но при этом есть большое количество программ от которых огромные крысы не требуется гораздо важнее для не чтоб них было меньше ошибок ну например банковские. 
системы в принципе когда вы работаете там сайтом ну наверное отклик бросил быть за три секунды там деньги переводите но будет ли он за одну секунду или задвину не так важно не имеет смысл канада за этим лучше что 
программа была надежный без ошибок написали бы и быстрее сочным солидуса значит подарок и меньше денег потому что нужно с программистом водить зарплату нужно платить если есть ошибки нужно платить там саппорту который будет 
как-то пользования все дела случае ошибок и так далее есть большое. количество ниш в которых есть количество. ниш которые более башен.

	 хотя как бы языке другом на стыках пытаются как то 
конкурировать но майдас написан на java. но в принципе вот на данный момент смерти разные области. что сделали на java найджара на массив это отдельный класс. то есть любое обращение элементу массива 
это фактически вы за функций и внутри. этой функции есть проверка и эта. проверка если выходит за пределы массива бросает xf жаль обработка ошибок построена exception of через пару лекции мы доберемся про детали этого но кто вы. 
получаете у вас никогда при работе с массивом не будет отдыхает беседа если вы вышли за пределы массива программа гарантированного упадет гарантированно сломается если все про использовать один запустили работать 
другой родитель не работает в общем пойди разберись в какое в каком месте. это огромный honor я ошибся на java не так если вы же загудела mozilla стопроцентно программа падает обращение качайте массива это не обращение к чайке 
памяти это вызов функции которая контролирует диапазоны. значит плюс и понятно то есть быстро. обнаруженные ошибки минусы конечно опять. производительность вот у меня есть цикл. по массиву и на каждый если носи на си 
плюс плюс вот содержимое цикла это одна. инструкция то в на каждой итерации цикла добавляется по проверке которая контролирует диапазона я конечно правильно стран. следующий пункт сборщик мусора все очень 
широкие возможности потому. где будет размещена переменная можно бы сделать глобальную переменную можно. сделать переменную на стыке можно выделить переменную для ли ческой памяти. в хип при этом когда ты работаешь с 
типом. у тебя это называется почему управление памятью. то есть ты должен сам случае такси инструкцию и функцию free вызывать случае все плюс вызывать оператор диет. 
вот в моем примере обе ситуации ведут утечки потому что и в первом втором. примере программист забыл что выделенный но в первом случае объект в 1 мосин. стран случае объект опять же если то грамм маленькая она запустилась делала 
свою работу и закончила это не аккуратно не страшно потому что просто как загнанная в стену завершает свою работу все выделенные ими. ресурсы освобождаются другое дело что мы с вами обсуждаешь то есть когда мы 
серверного типа которые должны работать. постоянно выбранном софт в банкомате или. программа управления ракетой или сервер. который например вам для вас генерировал страничке вконтакте все эти программы они один раз до 
пустились и работает вечном цикле. ожидали там каких то действия пользователя что на этим на идея ответить ну там например программ поныне ракеты на датчике какие то мере его. кругу зависимости от того что что там 
смотря что говорит или земли шлют и что датчики показывают какие-то воздействия. применяют ракетном двигателе включает сайт постоянно в этом цикле программа ожидает запроса пришел ваш за броском скажем 
покажи мне там чертова программа генерирует ответ посылает вам и жду следующего запросов эти программы не. завершаются утечка в такой программе ведет большим проблемам. потому что постепенно у вас остается все 
меньше свободной памяти сначала берёт потому что программа стен тормозить потому что посмотрел может использовать swap файл как только начнет. не хватать с тем начнет данные корова на табло не использовала из памяти 
складывать на жесткий диск жесткий диск ну как минимум 10 раз бедные чем оперативная память на самом деле больше. вот собственно начал тормозить тогда уже закончится вместо обведенная тацу память на диске 
программа завершит мы опять же вы представьте у нас работает сервер и 1 день деле он падает и вам нужно разобраться где там со внутри стало огромной программы вы забыли выполнить. ее брата решили по-другому это синтаксис 
java. где происходит деление памяти но похоже на си плюс нос мы немножко поговорим о. нюансах но при этом инструкции оператора. делит в языке нету должен выделить память с помощью надрать ранил. 
удивит вызывает недолго специально для. этого со старта java машины отключён отдельный компонент к нам двоится кабачка лектор или по русски. сборщик мусора задача сборщика мусора отслеживать какими объектами вы. 
перестали пользоваться и и их удалять. если например у вас внутри ваших функции не осталось ни одной ссылки на существующие объекты в внутри функции создали объект помощью new и мы шли этой 
функции ссылку на этот объект никуда не передали значит после окончания функции больше эти объекты мне воспользоваться он как больше не нужен вот. горбач коллег топический просыпается от 
смогли все такие ссылки в памяти и удаляют те которые больше не нужны. понятно что это праведность одной стороны нам не нужно писать делить и проблема утечки памяти отсутствует но. это ведет кому что программы 
джаве среднем требует больше памяти логан на си плюс плюс. почему потому что когда там еще бабочка лектор проснется он работает не постоянно просыпается героически когда он танк решит что вот это конкретно 
память больше не нужно все требует какого-то времени и вот все это время ненужные уже данные которые программисты на си плюс ну послушал бы диляна не был удалились потому что он сам только нужно удалять а тут есть некий алгоритм. 
который запускается периодически еще как бы не сразу а должен там что-то как-то посчитать что по этике и добавить больше не нужно его надо удалить собственно именно поэтому ну и понятно что с одной стороны 
у тебя требуется больше поймете на другой стороны еще иметь не работать начинает потому что работает твоя программа еще какой-то момент проснулся и начал ходить по памяти 
считаю эти ссылки garbage collector понятно что он тоже. отжирает ресурсы процесс просто может сказать запустилась еще одна программа. которая конкурирует своей программой за ресурсы процессора. 
то есть все что я рассказываю это мы ценой облегчение в жизни программиста чтобы было проще программировать мы теряем производительность и теряем объем памяти но опять же это очень разумный компромисс потому что очень часто лучше 
пусть программ будет надежно и у нее не. бывает утечек у него не бывает падение поп воспроизводимых мы готовы за это заплатить. скоростью о памяти мотор можем купить у нас там не так и на дороге стоит вот 
такие соображения.

	 значит ну опять же конечно вот эти вот принципиальные решения они ведут к. ухудшению производительности но конечно инженер-разработчик компиляторов и java машин 
предпринимают все эти усилия чтобы даже. в таких условиях получить довольно. быстрой программы и я щас расскажу о технологиях.

	 которые придуманы того чтобы программа трава ускорить и вот благодаря этим 
технологиям. иногда для специально сконструированных. примеров получается сделать программу ножами ну и какой-то фрагмент быстрее чем. алогично фрагмент на си плюс плюс значит. 
смотрите у нас мы тогда с вами крат отмечали говорить кладезь и плюс плюс говорили что бывают интерпретатор байт. компиляторы что такой интерпретатор это программа которая за разберет одну инструкцию. 
ее выполнения что такое компилятор то. есть он у меня есть программа на языке. высокого уровня и компилятор должен взять и сгенерировать оптимальный набор инструкций он должен с языка высокого уровня перевести на машинный язык при 
этом он много раз проходит по программе в каждый конкретный момент он сможет только одно конкретное место программе а может смотреть и на инструкцию которая была другая инструкцию было которая была после. 
ну например у вас программе сначала идет инструкция сложения потом инструкции умножения и когда ты знаешь что у этого процессор есть одна северная инструкция которая позволяет и сложение сделать и. умножение ну например там вот у вас в. 
программе написано а равно а + 1 а потом. написано там а равно а умножить на 3 вот и компилятор знает мне что у вас в процессор есть инструкция муп этот. которая сразу умножают и складывает и он видишь то есть две такие инструкции 
подряд и можно их там заменить на там. скажем там булып там a13 что то такое да интерпретатор о таких штук делать не может потому что он зараз обрабатывает только одну инструкцию торг мы до этого обсуждали 
работать а у машина взяла одну. инструкцию транслировало в в нативный код выполнила ну как бы тут вот для java машина вот этот байт код является. аналогом исходного кода на языке си для компилятора но компилятор 
он за раз просмотреть много инструкции смотрит на целый блок интерпретатор же смотрел только на одну инструкцию. конечно так никого не устраивало и. хотели джаву добавить конечно. компиляцию и оптимизацию на самом деле 
есть такая технология но она используется современный зал шок который. называется jit это джастин тайм ну то есть можно перевести. компиляция время исполнения и hotspot hotspot как бы горячее место то есть 
место которая чаще всего выполняется или место которое требует максимально чтоб остальных инструкция то есть java машина изначально вашу программа начинает fans. режиме этапе татара но при этом оно ведет статистику про выполняемый. 
методы внутрь функции и смотрит какие из них выполняются чаще всего на какие из них приходится основная работа с точки зрения процесса и назад hotspot то есть разные скины в программе так называемые гарячие области области которые простым. 
вас чаще всего после этого начинает работать кусок называется джек джек. компилятор он именно эти горячий области. компилирует то есть уже старается для. них не каждую инструкцию перевести в байт-кода перевести в нативный код 
а взять целый блок эту всю функцию целиком и подобрать для него оптимальный набор инструкций чтобы он как можно быстрее выполнялся при этом конечно вот. он делает вещи ну типа которых я. рассказал что я хочу что вы понимали. 
такого рода вещи компилятор языка java которые компилирует байт-код делать не может потому что он компилирует для java машины про возможности процессора он не знает про возможно знает только виртуальная машина java вот 
и как бы получается что в программе начала есть две компиляции 1 компиляция это вы вызываете с командной строки там или из модели g идея компиляции который образует в байт-код и потом компиляции. время выполнения берутся наиболее часто. 
используемые функции и для них во время. выполнения компилятор внутри java машины пытается подобрать оптимальный набор уже процессорных команд как отделать. компиляторы закрасили си плюс плюс.

	 скажите пожалуйста с точки зрения. 
информации у кого больше информации о программе у компилятора языка си плюс плюс. или у компилятора внутри java машины и. почему такой непростой вопрос но вдруг. рукава tobot идеи.

	 
да значит получится расшатывать ужава потому что она знает значение некоторых переменных и может оптимизировать код применяют значения у тлей это правильное здесь приведу некий. пример пример будет недостоверный все 
раза немножко сложнее но этот пример. даст возможность понять о чем взять почему компилятор языка java которые внутри java машина может иногда трава тут взгляд раза кассе посмотрите на др. за гасим он вот у вас например танк есть 
вот такой код.

	 [аплодисменты].

	 тут нет никакого особенного смысла просто чтобы показать идею вот это. программой закиси когда компилятор перевода в машинный код он делать это до. 
запуска программы пор не знает какое значение идет пользователь и поэтому он вот и вот эту проверку должен преобразовать в какую-то инструкцию ну так как кмп соборная. инструкция теперь у нас есть компилятор. 
на джаве у него точно такая же программа но скомпилировать он ее будет в момент выполнения. ну то есть например он компилирует вот этот кусок который ниже в момент когда значение а уже известно и например. 
пользователь ввёл n равное 5 если компиляции вот этого куска. проводить в этот момент то вот этот кусок из программы можно вообще. выполнить выкинуть то есть ты точно. знаешь что пор никогда не выполнен в 6 
пользователь ввёл. 5 то вот здесь вот не когда они будет больше десяти то есть ты можешь просто взять и выкинуть из цикла вот это вот одну проверку которую компилятор языка 
все для этого сталин а у тебя под это в цикле на одну инструкцию меньше еще раз это не просто подобный пример но он поясняет что компилятор языка java который находится внутри виртуальной машины то что он называется джек джастин 
тайм компиляция момента мнение он обладает большей информацией и поэтому может иногда получить более. лучший кот опять же это как бы редкие. случаи и все равно надо понимаешь что программа на джаве 
будет работать мельче программы на си си плюс плюс и долблю мне за это не за. производительность окей так.

	 какие есть еще особенности у джавы. значит смотрите когда за свою работу берется компилятор языка си плюс плюс он 
многократно ходит по вашей программе и. старается скрыть создать оптимальный набор инструкций вам быстрее всего исполнялось в результате программа очень. сильно меняется то есть получить из к сенсорной программы назад программу на. 
оси очень сложно конечно например можно делать решить следующую задачу она несложная вот например у вас где-то в программе. есть проверка серийного номера но что программа воды сильно была куплена вот. 
не очень сложно взять двоичный код и анализом его найти то место которое соответствует одной этой проверки ну например удачно в коде это место перезаписать отменить проверку. это сделать реалистично один из способов 
взлома программ то есть тем что можно пользоваться там лицензионным программным теперь он состоит в этом но например если у вас есть некий алгоритм который составляет вашим финальный собственность торговать алгоритм анализа 
днк для получение лекарств и вы не хотите ванникова рассказывать то. восстановить по двоичному коду ваш алгоритм это практически не реализуемая задача очень сложно ну практически невозможно потому что компилятор 
программу носил очень сильно. перелопатить у джавы не так в джаве в байт-код попадает очень много информации об исходной программе сохраняются имена функций сохраняются имена классов сохраняется поля классом 
единственно что исчезает это имена локальных переменных. вот по такому байт-кода восстановить. кого программу очень реалистично это. реальное дело то есть были судебные. прецеденты когда одна фирма брала 
двоичный код нам а бойкот в другой первое где компилировали программу получала программы на java немножко зарабатывала. и продавал от своего имени и какие плюсы за зачем это делается. 
зачем так много информации сохраняется.

	 например если программе происходит ошибка тот самый accusser в джаве мы поговорим в этом подробно позже вы на экране увидьте точное описание того места где ошибка произошла 
то есть вы не просто увидите что случилась ошибка java омской ошибка произошла в таком-то файле на такой-то строчки внутри такой то функция это возможно только потому что в байт-код сходилось очень много зараза в исходной 
программе все такого нет вы бы только можете сами вручную в каждое сообщение. об ошибке вручную писать что это за место где ошибка произошла это точно муторно джори происходит автоматически есть вы когда генерал генерируете. 
исключения вы не это вручную строчку не добавляете но java машина эту заразу может достать потому что в байт коде эта информация хранится о том где мы где вот текущие спал исполняемая инструкции на которая выпала магазин находится на 3 
каковой файла в тёплой функции так далее это плюс и минус. я уже сказал то есть по байт-код у реалистичного ставить исходный код на java ну ты снесли что это дело за пять минут. 
но в принципе если xi плюс плюс это огромный сложится задача то нажали тара личная задача и поэтому для жару есть стали программы который называется отпуска тары ну как бы английский термин опускает 
означает запутывать они работают исходным кодом на джаве то есть прежде чем отдать программу компилятору вы отдаете программе опускаться которая. программу всяко меняет то есть она ваших вы когда программируете принято там 
именно функции имена классов давайте частичное ну типа там сорт или монстр или но чтобы другой программист мог понять что это вообще делает а опускать он. берет и там монстр тренирует vx файл 
переименуют в y и так далее имена переменных изменит в общем он пытается всяко запутать исходную программу что по ней было не разобраться вот эта. особенность байт-кода следующий особенность над наготе к java 
я уже неоднократно разных курсов поминал. что чем более молодой язык ну вот java нам 90-е годы там все плюсую семидесятые. годы чем шире у него обычный а то до тех то есть стандарт игротеку java. входят ну не только такие привычные вещи. 
типа там контейнеров алгоритмов но это то что мы с вами на си плюс изучают он. листы хэш-таблицы ходит для работ с файловой системой но все плюс плюс работа с файловой системой появилась только по моему стандарте. 
семнадцатого года 2017 года под по работы с файловой системой что мы файл можем читать и записать это это можно. было и в 70 году по на все придумали что в стандарте языка стандарте библиотеки появились команды 
прочитать список файлов в директории удали директор и создадите которые так. далее раньше не приноси до 2017 года вам нужно было специально для тех которая под каждый писал с тем была бы своя. djali вот уже в первой версии поскольку 
они думали о кроссплатформенность ее. нужно чтобы все это работало подраться с тем уже в транс для отёки была поддержка. файловой системы опять же изначально была поддержка многопоточности то си плюс плюс тоже накладываясь появилась 
там каком-то четырнадцатом году штольню. вот потом графическая библиотека все плюс плюс стандарт языка графический язык до сих пор не входит джайда можете написать программу графическим интерфейсом которая будет работать 
под основным песчаными системами но их раз на практике будем этим заниматься сетевое программирование то же самое на си для тех уносит смесь до сих пор сетевое программирование входит на djali то есть нужно братьев что еще не входит 
в наготе под каждую систему есть библиотека . по-разному работают вам нужно если таити программа дед кроссплатформенность и плюс плюс вам нужно предусматривать. интеграций ускользать библиотека java по 
умолчанию все это из коробки вам. доступны ну работу минут что в 7 для си плюс плюс есть всякие сторонние библиотеки нестандартные направлять эту каюте которая пытается от же задачу. решить но как бы вот чтобы быть решение 
было сразу готова и беспроблемное от. конечного так ну тут написано что. текущая версия java 8 на слайде но с момента преподавания этого курса java. сменился релиза цикл то есть если вы это простым языком версии java стали 
выпускать гораздо чаще чем раньше то есть сейчас по моему версия дрова на. выходит раз толик 3-4 месяца в общем текущая версия java который мне кажется. вышла там то ли пришла tulip вышла 20 могу продать им же мне кажется там то ли 
15 февраля вышло . 21 формирует как сейчас будет вот версия. java будет 15 вот то есть текущая версия. языка такая есть если логических налоги. ваш похожую на джаву там все что я. говорил до этого это правда и для вот 
этого языка сишарп который был придуман если позже травы и в принципе изначально был более передовым потому что язык которого входят следующие он учитывает ошибки которые были. предшественники но когда сишарп вы же он 
был более передовым чертова но сейчас как обычно происходит это путь к бегунку reusch технологии и если что-то появляется хорошее в одном языке и и там эту особенность там через пару релизов сразу реализуют другом языке дать 
конкуренты друг у друга копируют то есть принципе эти многие. конкурирующие сишарп аналог чего нет фреймворк это аналог java машины. единственное отличие что особый есть. всякие попытки сделать.

	 
виртуальную машину для сишарпа под другие операционные системы там например там есть под linux версия но в. принципе особо это так буйно как джаве не развивается все-таки если мы говорим отжали тут скорее всего 
кроссплатформенная разработка а на тяжа и скорее всего эта разработка под windows. хотя есть версии и по другие операционные системы но это все-таки не очень популярны что такое не mainstream 
вот с точки зрения там доступа к памяти контроля за пределы массива бабочка лектора сефард это это аналог если вы умеете программировать на сишарпе вы ну там популистов книжку периоде на java из java тоже может фиктивность шар ну вот. 
это были близки и технологии что еще можно сказать под android программы тоже пишут на джарван. там есть тонкость google угол немножко другой байт код то есть если вы программу скомпилировать джавой под. 
desktop вам ее перенести не перекомпилировать под android мне получится то есть на уровне исходного кода все одинаковые а вот на уровне. двоичного кода не работает ну и конечно графический близок по телефон немножко 
другая потому что экран меньшего размера вместо мышки палец и так далее но в общем если вы а свой язык java то есть путь в. android очень короткий если под ios все-таки язык который там есть это все 
таки ближе к себе плюс плюс у. вот опыте все то android java теперь ну. я уже говорил что java развивается как с помощью комьюнити ну то есть там добровольной ассоциации людей из разных фирм и просто волонтеров и также ли. 
фирмы орков есть версии для машины от. oracal есть версии от комьюнити опыт же т.к. вот в принципе для нашего курса в годится любая версия.

	 так ну дальше уже пойдут я вот договорю. 
5 слайд будет 1 побольше дальше будет таки технически особенность там где. скачать какие версии есть такое сейчас закончил кусок про основные идеи которые. были заложены и джори и ну как бы чем мы за это заплатили вашим обсуждение идеи 
давай я сделал небольшую паузу может у кого-то появились вопросы.

	 а.

	 да что еще можно сказать что в принципе. вот развитие java идет не только в том направлении что добывая с новой 
конструкции появляются и другие языки. которые тоже компилируются байт-код ну наверное два самых популярных таких языка это язык скала язык котлин потом санкт-петербурге разрабатывается это языки которые комбинируются в байт-код. 
тоже машины и идеологически они пытаются стать лучше чем java пытаюсь что программистом было проще программировать. такое дальнейшее развитие идей java.

	 вопрос по льда питателем компилятор однопроходные компиляторы. 
это изобретя тары или что то другое ну. знаете я не большой специалист и я. отвечу но с моей точки зрения все-таки. интерпретатор делает следующем берёт. одну инструкцию и ее транслирует въезду. в команду процессоры выполняет вот. 
компилятор он не выполняет не когда он просто на выходе. генерирует код на другом языке ну то есть например он там с языка высокого уровня.

	 генерирует программу у нас эндрю он 
может сделать один проход может быть может использовать несколько проходов но при этом он во время своего прохода. может анализировать несколько инструкций. соседних вот и он не делать выполнения это катар обычно он смотрит только на 
одну инструкцию и тут же ее выполняет. при этом вот я думаю что возможно вот если есть специалисты по компилятором. интерпретатор и много по четким формулировками теперь можно посмотреть возможно я ошибаюсь вот именно так 
строго но вот с точки зрения практики вот есть как я сказал еще раз интегратор за разберу одну инструкцию тут же ее выполняют в процессе для этого выполнение делал преобразований осталось другой компилятор мог рассмотреть 
несколько соседних инструкций может одно. может несколько и просто преобразует в в. другой язык без выполнения вот ну если картина была под вопрос кратко интерпретатор. это не на прохладный компилятор. 
интерпретатор обычно он после трансляции но тыс перевод снова языкам другой как. горит собственные выполняет сразу.

	 но сразу скажу что точные формулировки. это не мой конек ну если конечно дело не касается там чего-то математического. 
именно программирования.

	 так давайте двигаться дальше значит если скачивать себе загружать себе. дистрибутив джавы то надо помнить о следующих понятиях есть понятие джулия java runtime environment 
если прямой пирог при вот это значит. окружении запуска java джильи нужно тем кто. программы на java только запускает. джильи это виртуальная машина java ну собственно это обычно называется java 
игр или java эльф в линуксе и стандарной библиотека то есть это тот набор к. дружин только для запуска программ вам же нужен просто назвать языка java. development kit набор разработчика. джавы что у тебя включая джирайя ну то 
есть то что надо для запуска java +. компилятор как бы говорят на жаргоне. java se или java куда сито java.com 5 стать исполняемая программа которая является компилятор то есть она нужна. для разработчиков вот если кто-то. 
упоминает java ток.

	 документация по джаве представлена вот в таком формате то есть можно взять в гугле слова java долг и получить ночью попозже. мы посмотрим это стандартно ты [ __ ] и 
докуда сказав для отёки она бывает как он лайн так и можно. скачать себе zip-архив спор с васаби. отёки ну если вы вижу студию когда там наживали справку и там или ходить на хоть макросов там и казаков они часто 
называется msdn такая огромный справочник по стандартным для отёки. теперь изначально джаван было в трех версиях что это значит это значит что компилятор один и тот же язык один и тот же просто разными осканов для теке то 
что мы будем с вами вот в этом семестре обсуждать это называется с. не давай съем стандарта ниши то есть это. базовая java структуры данных алгоритмы. работа с файлами многопоточность и так. далее была еще такая версия java микро. 
идише одно время это была библиотека java для устроить менее воде вчем. компьютер ну а но одно время даже вот на старых телефонах там типа науки вот под. них писали или java ильи вот или для не пытались писать для каких-то 
умных на микроволновых но в данный. момент они популярная сегодня существует. экзотическом видео вот и если речь о написании на java для мобильных устройств это android поджала местное точки зрения практически не желая есть 
еще java и и. enterprise идише это библиотека java для. написания сетевых программ ей мы. займемся в следующем семестре.

	 с я будем знать в этом семестре м я фактически мертва если вам нужно 
мобильные устройства берите android и. это собственно сетевые программы сайты абсолютно семестре. значит что еще можно сказать про жанну синтаксисе подобное то есть все очень просто будет переключиться на java. 
ну или си плюс плюс и программируют на. java в объектно-ориентированном стиле то есть если на си плюс плюс могли так просто нужно в стиле как носи итог используя функции могли писать на классах она где комбинировать оба. 
подхода то на джаве изначально программирует глупость или этот стиль является основным то есть если вы сделаете всю свою огромную программу виде одного класса в котором нет сто пятьсот функций вас не поймут 
это не стиль java ну а просто функцию без класса да и. вообще нельзя написать кроме того в. джаве нет разделения на заголовочный. и файлы с классами то есть класс описывается в одном файле совершением 
java. ну мы посмотрим пример из исходных кодов решения java у байт-кода то есть то что компе она преобразуют расширения класс если у вас есть hello world java когда. оно преобразует его в hello world class.

	 
есть соглашение о 100 имя класс должно совпадать с именем файла в котором он. хранится но опять же что для java. известно что поскольку изначально java.

	 вышли ошибки и создавала конкретная фирма и она сразу выпустила. 
java коде нко меньше но то есть пишется.

	 ходим конвент и то есть документ в. которой можно скачать и посмотреть то есть там описано как на джаннет принято. программировать с точки зрения оформления кода. 
но там какие имена файлов сейчас покажу. как это пример какие отступы как разбивать длинные строчке где ставятся скобки вы творите внимание открывающая скобка закрывающая скобка ну и так далее это вот там 20 страниц описано как 
писать код чтобы вот считалось что это хороший ход на на java если на си плюс плюс такого общего мнения нету просто собираются в начале проекта люди и вот договариваются как они будут не гутарить скобочках нибудь 
эти пробелы или есть такие его же coding гайдлайн от разных известных фильм от гугла или ещё от кого-то тут же но вот просто есть единый документ которого в общем все более-менее следуют как как переменные. 
описываются там ветер одна переменная на. строку то есть вот так более. предпочтение вот так более вот так более предпочтительно чем вот. так ну и так далее в общем есть четкие указания как как сделать ну собственно. 
тоже на практиках превратили будут у вас вот тоже требовать чтобы программ были. похожи на то как его царь. конвенция программе на java.

	 [музыка].

	 ну вот это соглашение тоже оттуда что 
обычно если у вас вы на массе могли. написать там скажем май лап и хранить. там класс который как-нибудь называется. граф то тут нужно чтобы класс граф. хранился в классе граф java так первая. программа значит опять же наша задача 
разобраться в течение на и на следующей лекции мы в детских каждое слово здесь. понять но пока вот если выйдет попробовать вам нужно вернуться там к этому слайду скачать 7 лет гдк это все бесплатно.

	 
вот первая ссылка все получиться и так. далее вот первая программа то есть давайте внимание тут есть два класса есть класс которая делает работу. есть класс допускающих ну опытный человек как вы стразами этот есть. 
функция мы вот main получает параметр. командной строки вот создается вот этот. класс вот он один из вас блин сам принтер это вывод на экран с переводом строки. что-то выводит это класс но есть метод. 
вот здесь мы создается экземпляр класса. потом не вызывается метод ну то есть это крыло word делают значит дочь написано. ja россия halo write а вот эта строчка и потом я строчка java мы пишите пожалуйста что делать . один лишь на 
делая строчка 2. если вы запомнили из моего рассказа.

	 да спасибо всю реальность вот это вызов компилятора на всякий случай скажу что первые три лабораторных работ и вас будут просить использовать командную 
строку начиная с 3 лабораторной работы можно. пользоваться я люблю любой ядре спасибо все ответы правильные. здесь это два java файла это комбезов компилятора и результате получится 2 
класс файлов байт-кода. а вот это запуск вызвать java машину отдать ей class main джон машина просканирует этот класс посмотрите на. функция main если случайно ждет запуску.

	 так значит теперь по поводу это уже 
близко 1 лапы если говорить про чистый объектно-ориентированный подход не знаю насколько корректный перевод слова. чистый если бы я говорил по-английски я. бы использовал термин pr как бы чистый. 
не смысле что не грязный а слышать. чистый какая-то идея использована без. всяких уточнений применения практике общем берется только одна голая идея без. примеси других всяких кострюков ну вот и. там подкручивание вот если мы говорим 
про чистый объектно-ориентированный язык это значит что в этой программе или в этом языке не должно быть ничего кроме объектов только классы и объекты вот например если бы java был таким языком тогда бы например им тоже было бы. 
классом если мне нужно было увеличить значение на единичку я бы вызывал функцию. инкремент если мне нужно было один int прибавить другому я вызвал и функцию id. конечно так было бы совсем медленно 
потому что любой вызов функции накладные расходы но я думаю что вы помните сложных курс это вызывает функцию. тебе нужно перейти на место в памяти где расположены ил код все ее параметры сложить на стек запомнить адрес возврата. 
начать выполнение в конце перейти на адрес возврата на вызов каждый функций ты тратишь добавили процентной операции то есть если бы java был чисто объектно-ориентированным языком не были только бы объекта и работала бы еще 
медленнее чем сейчас потому что вот то. что например на си бы там было бы l плюс плюс это было бы там одна или две. основные функции разные команды то вызов функции. это ну десяточек команд вот и поэтому. 
уже настолько или же решили не замедлять java это не чистый объектно-ориентированный язык а конечно. в нем есть и примитивные типы то есть есть просто простые переменные которых. вам привыкли си плюс плюс вот есть набор. 
типов это все типы которые есть в java и а не одни и те же на всех платформах если помните когда-то я рассказывал что. для скорости ты или такое вот все допущения си плюс плюс например in the зависит от платформы то есть на одном 
компьютере эндо ну так на слабом компе drink может быть два байта на современных компьютерах и может быть четыре байта если вы написали программу. то это может создать не плохую шутку написали программу которая рассчитывает. 
что в переменной можно хранить 22 а потом вас по рампе компилирует под компьютер в котором но он такой портативный маленький и в нем и доски переменные они два байта может только два 16 ими штатив вас просто потеряется 
часть значение которого хранить драве от. такого нету в джори вот есть эти типы и они абсолютно одинаковые на любой платформе где вы не запускаете на любом процессор его персоной системе обрати. внимание что нету слова say нет и an. 
seiner все типы знаковые то есть есть. логический тип true force бульон есть. тип чар для хранения символов но тут написано 2 байта и unicode явка этому. еще вернусь расскажу есть сила численные типы buy черт и фланг есть тип с 
плавающей точкой. так давайте значит сейчас будет перерыв. давайте продолжим в 21:20 2135 через пятнадцать что можно было спокойно. отдохнуть вторая часть лекции будет. наверно попроще мы просто разберем там. 
чем и for отличается от аналогов но там наследования всяким ножка. посмотрим мелочей которые отличают вот ja ja vu от считаешь просто будет наглядно разбирать язык каких-то идей и. когда нужно готовить и их не будет вот. 
если у кого какие вопросы я же вижу эту. трансляцию и telegram пришли просто. souls 3 марта начнется 2135.

	 так опечатка ли здесь лак четыре байта. читала сомневался спасибо может быть. [музыка] 
менялы.

	 беспалова дичь на общество было бы. восемь конечно наверно это ошибка смысла. не было да спасибо титана это опечатка. конечно же сейчас мы ее исправим то есть.

	 конечно 8.

	 
так но.

	 муки.

	 спасибо дане свёкла была опечатка.

	 отдавайте прошу вас если что можно будет вопрос задать в начале следующей лекции. которая будет часть транс минут